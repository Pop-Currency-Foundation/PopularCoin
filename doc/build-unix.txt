Copyright (c) 2009-2012 Bitcoin Developers
Distributed under the MIT/X11 software license, see the accompanying
file license.txt or http://www.opensource.org/licenses/mit-license.php.
This product includes software developed by the OpenSSL Project for use in
the OpenSSL Toolkit (http://www.openssl.org/).  This product includes
cryptographic software written by Eric Young (eay@cryptsoft.com) and UPnP
software written by Thomas Bernard.


UNIX BUILD NOTES
================

To Build
--------

cd src/
make -f makefile.unix            # Headless PopularCoin

See readme-qt.rst for instructions on building PopularCoin QT,
the graphical PopularCoin wallet.

Dependencies
------------

 Library     Purpose           Description
 -------     -------           -----------
 libssl      SSL Support       Secure communications
 libdb4.8    Berkeley DB       Blockchain & wallet storage
 libboost    Boost             C++ Library
 miniupnpc   UPnP Support      Optional firewall-jumping support
 libqrencode QRCode generation Optional QRCode generation

Note that libexecinfo should be installed, if you building under *BSD systems. 
This library provides backtrace facility.

miniupnpc may be used for UPnP port mapping.  It can be downloaded from
http://miniupnp.tuxfamily.org/files/.  UPnP support is compiled in and
turned off by default.  Set USE_UPNP to a different value to control this:
 USE_UPNP=-    No UPnP support - miniupnp not required
 USE_UPNP=0    (the default) UPnP support turned off by default at runtime
 USE_UPNP=1    UPnP support turned on by default at runtime

libqrencode may be used for QRCode image generation. It can be downloaded
from http://fukuchi.org/works/qrencode/index.html.en, or installed via
your package manager. Set USE_QRCODE to control this:
 USE_QRCODE=0   (the default) No QRCode support - libqrcode not required
 USE_QRCODE=1   QRCode support enabled

Licenses of statically linked libraries:
 Berkeley DB   New BSD license with additional requirement that linked
               software must be free open source
 Boost         MIT-like license
 miniupnpc     New (3-clause) BSD license

Versions used in this release:
 GCC           4.3.3
 OpenSSL       0.9.8g
 Berkeley DB   4.8.30.NC
 Boost         1.37
 miniupnpc     1.6

Dependency Build Instructions: Ubuntu & Debian
----------------------------------------------
sudo apt-get install build-essential
sudo apt-get install libssl-dev
New -> sudo apt-get install libdb5.3-dev libdb5.3++-dev
Boost 1.40+: sudo apt-get install libboost-all-dev
 or Boost 1.37: sudo apt-get install libboost1.37-dev
sudo apt-get install libqrencode-dev

// also, this may help -> probably need to run: apt-get upgrade
sudo apt-get install libdb++-dev
sudo apt-get install libminiupnpc-dev

for Ubuntu 12.04:
sudo apt-get install libboost-all-dev

If using Boost 1.37, append -mt to the boost libraries in the makefile.

sudo apt-get install git

install from github
sudo git clone git@github.com:Pop-Currency-Foundation/PopularCoin.git
	or git clone https://github.com/Pop-Currency-Foundation/PopularCoin.git

	cd PopularCoin/src

Next we must find out how many cores we have
Code: [Select]
cat /proc/cpuinfo | grep -i "model name"

You should get output similar to this:
Code: [Select]
someguy@master:~/popcoin/src $ cat /proc/cpuinfo | grep -i "model name"
model name      : Intel(R) Core(TM) i7 CPU         920  @ 2.67GHz
model name      : Intel(R) Core(TM) i7 CPU         920  @ 2.67GHz
model name      : Intel(R) Core(TM) i7 CPU         920  @ 2.67GHz
model name      : Intel(R) Core(TM) i7 CPU         920  @ 2.67GHz

If you have 4 lines of "model name:", then this means you have 4 cores or CPU's. If you have just 1, you only have a single core available.

Now that we know this, we can continue to compile PopularCoin
Change -j4 to the amount of cores you have, you can find this out by following the previous instructions above ^^^^
Code: [Select]
make -j4 -f makefile.unix USE_UPNP=

If there were no errors, we can continue to the last part, if you saw something similar to "exiting: error" or "make error", you may need to make sure you've installed all of the prequisites, and that your system is up to date ( sudo apt-get upgrade )

We're almost done, the last step is to copy popcoind into /usr/bin
Code: [Select]
sudo cp popcoind /usr/bin/popcoind

Now that popcoind is installed, we just need to create a config file.
First, create the .popcoincore dir to ensure it exists.
Code: [Select]
mkdir ~/.popcoincore

You can create the ~/.popcoincore/popcoin.conf from another computer and upload it via FTP or SCP if needed.

To create and edit the config, we're going to use nano, if you have a different editor in mind, feel free to use that instead.
Code: [Select]
nano ~/.popcoincore/popcoin.conf

Enter the following text:
Code: [Select]
server=1
rpcallowip=127.0.0.1
rpcuser=HardToGuessUsername
rpcpassword=Str0ngS3cur3Passw0rd1
port=18181
rpcport=27171

REMEMBER TO CHANGE THE USERNAME AND PASSWORD TO SOMETHING DIFFERENT, THIS IS JUST AN EXAMPLE.
(OPTIONAL):

If you're going to be accessing the daemon remotely, you should remove the rpcallowip= line, or add another line which says
Code: [Select]
rpcallowip=YOURIPADDRESS

For extra security we're going to lock down the config, otherwise other users on the system could find out our username and password, then steal our litecoins  ::) ( thanks 92vv15j67s for the reminder. )
Code: [Select]
chmod 600 ~/.popcoincore/popcoin.conf

We can finally start the daemon:
Code: [Select]
popcoind -daemon

You will get a message that says
Code: [Select]
popcoin server starting
	
	
	
	
	
	
	
	
	
	
	
	
Dependency Build Instructions: Gentoo
-------------------------------------

Note: If you just want to install bitcoind on Gentoo, you can add the PopularCoin
      overlay and use your package manager:
          layman -a popcoin && emerge popcoind

emerge -av1 --noreplace boost glib openssl sys-libs/db:4.8

Take the following steps to build (no UPnP support):
 cd ${BITCOIN_DIR}/src
 make -f makefile.unix USE_UPNP= BDB_INCLUDE_PATH='/usr/include/db4.8'
 strip popcoind


Notes
-----
The release is built with GCC and then "strip bitcoind" to strip the debug
symbols, which reduces the executable size by about 90%.


miniupnpc
---------
tar -xzvf miniupnpc-1.6.tar.gz
cd miniupnpc-1.6
make
sudo su
make install


Berkeley DB
-----------
You need Berkeley DB 4.8.  If you have to build Berkeley DB yourself:
../dist/configure --enable-cxx
make


Boost
-----
If you need to build Boost yourself:
sudo su
./bootstrap.sh
./bjam install


Security
--------
To help make your popcoind installation more secure by making certain attacks impossible to
exploit even if a vulnerability is found, you can take the following measures:

* Position Independent Executable
    Build position independent code to take advantage of Address Space Layout Randomization
    offered by some kernels. An attacker who is able to cause execution of code at an arbitrary
    memory location is thwarted if he doesn't know where anything useful is located.
    The stack and heap are randomly located by default but this allows the code section to be
    randomly located as well.

    On an Amd64 processor where a library was not compiled with -fPIC, this will cause an error
    such as: "relocation R_X86_64_32 against `......' can not be used when making a shared object;"

    To build with PIE, use:
    make -f makefile.unix ... -e PIE=1

    To test that you have built PIE executable, install scanelf, part of paxutils, and use:
    scanelf -e ./popcoind

    The output should contain:
     TYPE
    ET_DYN

* Non-executable Stack
    If the stack is executable then trivial stack based buffer overflow exploits are possible if
    vulnerable buffers are found. By default, popcoind should be built with a non-executable stack
    but if one of the libraries it uses asks for an executable stack or someone makes a mistake
    and uses a compiler extension which requires an executable stack, it will silently build an
    executable without the non-executable stack protection.

    To verify that the stack is non-executable after compiling use:
    scanelf -e ./popcoind

    the output should contain:
    STK/REL/PTL
    RW- R-- RW-

    The STK RW- means that the stack is readable and writeable but not executable.
